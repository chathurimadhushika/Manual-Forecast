import pandas as pd
import numpy as np
import psycopg2
import pandas as pd
#import matplotlib.pyplot as plt
import boto3
import io
from datetime import datetime
import os
 
connection = psycopg2.connect(host='vbp-wg-1.124008826013.ap-southeast-1.redshift-serverless.amazonaws.com',port = '5439', user='analytic_user_1', password='AnalyticUser2023#', database='dev')
cursor = connection.cursor()
 
 
def initial_load():
    cursor.execute("truncate table vbp_dialog_manual_growth")
    #;load growth values from redshift
    cursor.execute("select * from vbp_dialog_manual_growths")
    results = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    growth_values = pd.DataFrame(results, columns=columns)
 
    #Load traffic data - actualts from redshift
    cursor.execute("select sector_id, time_key,traffic_gb from VBP_DIALOG_MONTHLY_4BH_ML_DATA_10")
    results2 = cursor.fetchall()
    columns2 = [desc[0] for desc in cursor.description]
    res_df = pd.DataFrame(results2, columns=columns2)
    return growth_values, res_df
 
 
def data_load(res_df,growth_values):
    res_df['region'] = res_df['sector_id'].str[:2]
    growth_values.rename(columns={'area': 'region'}, inplace=True)
    res_df['time_key'] = pd.to_datetime(res_df['time_key'])
    merged_df = res_df.merge(growth_values, how='left', on='region')
    res_df = res_df[['sector_id' , 'time_key' , 'region' , 'traffic_gb']]
    filtered_df = merged_df[merged_df['time_key'] == '2023-12-01']
    #filtered_df=filtered_df[filtered_df['sector_id'] =='VA5034@2']
    return filtered_df
 
 
def traffic_values_generation(filtered_df):
    import pandas as pd
    import numpy as np
    current_date = datetime.now()
    start_date = current_date.replace(month=1, day=1).strftime('%Y-%m-%d')
    end_date = current_date.replace(month=12, day=1).strftime('%Y-%m-%d')
    time_range = pd.date_range(start=start_date, end=end_date, freq='MS')
    new_records = pd.DataFrame(columns=filtered_df.columns)
 
    for sector in filtered_df['sector_id'].unique():
        sector_data = filtered_df[filtered_df['sector_id'] == sector].iloc[-1].copy()  # Get the latest record
        unique_growth_values = filtered_df['growth'].unique()
        growth = unique_growth_values[0]
        for timestamp in time_range:
            # Create a new record based on the growth
            new_record = sector_data.copy()
            new_record['time_key'] = timestamp
            # Introduce some randomness in the growth rate
            growth_rate = np.random.uniform(growth/(1*100)/12, (growth)/(100)/12)  # Random growth rate between 20% and 30%
            growth_increment = new_record['traffic_gb'] * growth_rate
            new_record['traffic_gb'] = new_record['traffic_gb'] + growth_increment
 
            # Update sector_data for the next iteration
            sector_data = new_record.copy()
 
            # Append the new record to the DataFrame
            new_records = pd.concat([new_records, pd.DataFrame([new_record])], ignore_index=True)
    return new_records
 
cursor.execute("select distinct updated_time from vbp_dialog_manual_growths_inter_table")
growth_updated_time = cursor.fetchone()
growth_updated_time = growth_updated_time[0]
growth_updated_time = growth_updated_time.strftime('%Y-%m-%d %H:%M:%S')
 
cursor.execute("select distinct updated_time from vbp_dialog_manual_growth")
predictions_updated_time = cursor.fetchone()
 
if predictions_updated_time is not None:
    predictions_updated_time_1 = predictions_updated_time[0]
    print(predictions_updated_time_1)
else:
    predictions_updated_time_1 = datetime.now()
 
predictions_updated_time = predictions_updated_time_1.strftime('%Y-%m-%d %H:%M:%S')
 
 
print(growth_updated_time)
print(predictions_updated_time)
 
if growth_updated_time != predictions_updated_time :
    print("traffic values generation started")
    current_date = datetime.now()
    start_date = current_date.replace(month=1, day=1).strftime('%Y-%m-%d')
    end_date = current_date.replace(month=12, day=1).strftime('%Y-%m-%d')
    growth_values, res_df = initial_load()
    filtered_df = data_load(res_df,growth_values)
    #filtered_df=filtered_df[filtered_df['sector_id'] =='VA5034@2']
    new_records = traffic_values_generation(filtered_df)
 
    res_df_1 = res_df[['sector_id' , 'time_key' , 'traffic_gb']]
    new_records_1 = new_records[['sector_id' , 'time_key' , 'traffic_gb']]
    combined_df = pd.concat([res_df_1, new_records_1], ignore_index=True)
    growth_values_df = filtered_df[['sector_id','growth']]
    combined_df = combined_df.merge(growth_values_df, how='left', on='sector_id')
    #combined_df['updated_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    combined_df['updated_time'] = growth_updated_time
    combined_df.to_csv('vbp-manual-growth-test.csv', index= False)
    bucket = 'vbp-dialog-manual-growth-redshift-data'
    s3_res = boto3.resource('s3')
    #s3_res.meta.client.upload_file('/home/ec2-user/vbp-manual-growth-test.csv', bucket, 'temp_work/predictions/predictions/vbp-manual-growth-test.csv')
    #cursor.execute("COPY vbp_dialog_manual_growth FROM 's3://vbp-dialog/temp_work/predictions/predictions/vbp-manual-growth-test.csv' IAM_ROLE default delimiter ',' IGNOREHEADER 1;")
    s3_res.meta.client.upload_file('/home/ec2-user/vbp-manual-growth-test.csv', bucket, 'vbp-manual-growth-test.csv')
    cursor.execute("COPY vbp_dialog_manual_growth FROM 's3://vbp-dialog-manual-growth-redshift-data/vbp-manual-growth-test.csv' IAM_ROLE default delimiter ',' IGNOREHEADER 1;")
    cursor.execute("insert into vbp_dialog_manual_growth_final_table  select * from vbp_dialog_manual_growth")
    cursor.execute("truncate table mpg_vbp_dialog_prediction")
    cursor.execute("insert into mpg_vbp_dialog_prediction select sector_id , date ,dl_traffic_volume_gb , growth , updated_time from  vbp_dialog_manual_growth WHERE date  between  %s AND  %s", (start_date, end_date))
    print("forecasted values generation completed")
    print("prioritization procs running started")
    cursor.execute("CALL MPG_VBP_DIALOG_CALCULATIONS_PROC() ; commit ;")
    print("proc 1 completed")
    cursor.execute("CALL MPG_VBP_DIALOG_INSIGHTS_FINAL_NEW_PRED_AU_PROC(); commit;  ")
    print("proc 2 completed")
    cursor.execute("CALL MPG_VBP_DIALOG_SUMMARY_PROC(); commit; ")
    print("proc 3 completed")

    print("dashbaord proc started")
    cursor.execute("CALL vbp_dialog_dashboard_mpg_proc(); commit; ")
    print("dashbaord proc completed")
    connection.close()
    print("traffic values generation and prioritization completed completed")
 
connection.close()